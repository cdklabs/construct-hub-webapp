{
  "tasks": {
    "analyze-exports": {
      "name": "analyze-exports",
      "steps": [
        {
          "exec": "node scripts/analyze-exports"
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "react-scripts build"
        },
        {
          "spawn": "replace-worker"
        }
      ]
    },
    "cypress:open": {
      "name": "cypress:open",
      "description": "open the cypress test runner UI",
      "steps": [
        {
          "exec": "cypress open"
        }
      ]
    },
    "cypress:run": {
      "name": "cypress:run",
      "description": "run the cypress suite in CLI",
      "steps": [
        {
          "exec": "cypress run"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "dev": {
      "name": "dev",
      "description": "Starts the react application",
      "steps": [
        {
          "exec": "react-app-rewired start"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "mv $(npm pack) dist/js/"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "proxy-server": {
      "name": "proxy-server",
      "steps": [
        {
          "exec": "node ./scripts/proxy-server"
        }
      ]
    },
    "proxy-server:ci": {
      "name": "proxy-server:ci",
      "steps": [
        {
          "exec": "npx react-app-rewired build && CI=true yarn proxy-server"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "replace-worker": {
      "name": "replace-worker",
      "steps": [
        {
          "exec": "cp src/no-op-sw.js build/service-worker.js"
        },
        {
          "exec": "rm build/service-worker.js.map"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "eslint"
        },
        {
          "exec": "react-app-rewired test --watchAll=false"
        }
      ]
    },
    "test:unit": {
      "name": "test:unit",
      "steps": [
        {
          "exec": "npx react-app-rewired test"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "steps": [
        {
          "exec": "npx react-app-rewired test -u"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@testing-library/jest-dom,@testing-library/react,@testing-library/react-hooks,@testing-library/user-event,@types/jest,@types/lunr,@types/node-emoji,@types/react,@types/react-dom,@types/semver,cypress,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-jsx-a11y,eslint-plugin-prefer-arrow,eslint-plugin-prettier,eslint-plugin-react,eslint-plugin-react-hooks,express,express-http-proxy,jsii-docgen,prettier,projen,react-app-rewired,ts-node,ts-unused-exports,util,@chakra-ui/anatomy,@chakra-ui/icons,@chakra-ui/react,@chakra-ui/theme-tools,@jsii/spec,copy-to-clipboard,date-fns,hast-util-sanitize,jsii-reflect,lunr,node-emoji,prism-react-renderer,react,react-dom,react-helmet,react-markdown,react-query,react-router-dom,rehype-raw,rehype-sanitize,remark-emoji,remark-gfm,semver,spdx-license-list,web-vitals,workbox-core,workbox-expiration,workbox-precaching,workbox-routing,workbox-strategies"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @testing-library/jest-dom @testing-library/react @testing-library/react-hooks @testing-library/user-event @types/jest @types/lunr @types/node-emoji @types/node @types/react @types/react-dom @types/react-helmet @types/react-router-dom @types/semver @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs cypress eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-prefer-arrow eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks eslint express express-http-proxy jsii-docgen prettier projen react-app-rewired react-scripts standard-version ts-node ts-unused-exports typescript util @chakra-ui/anatomy @chakra-ui/icons @chakra-ui/react @chakra-ui/theme-tools @emotion/react @emotion/styled @jsii/spec copy-to-clipboard date-fns framer-motion hast-util-sanitize jsii-reflect lunr node-emoji prism-react-renderer react react-dom react-helmet react-markdown react-query react-router-dom rehype-raw rehype-sanitize remark-emoji remark-gfm semver spdx-license-list web-vitals workbox-core workbox-expiration workbox-precaching workbox-routing workbox-strategies"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
