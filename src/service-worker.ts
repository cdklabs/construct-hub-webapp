/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim, setCacheNameDetails } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";
import * as consts from "./constants/paths";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

setCacheNameDetails({
  prefix: "construct-hub-webapp",
});

const fetchOptions = {
  headers: {
    "Content-Type": "application/json",
  },
};

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");

registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    if (
      url.pathname.startsWith("/packages") &&
      !url.pathname.endsWith(".json")
    ) {
      return true;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    void self.skipWaiting();
  }
});

// Static assets that were not in pre-cache
registerRoute(
  new RegExp(/\/static\//),
  new StaleWhileRevalidate({
    cacheName: "static-resources",
  })
);

// The following routes cache our jsii.json, metadata.json, and catalog.json requests.

registerRoute(
  ({ url }) =>
    url.origin === self.origin && url.pathname.endsWith(consts.ASSEMBLY_SUFFIX),
  new StaleWhileRevalidate({
    fetchOptions,
    cacheName: "assembly-jsii",
    plugins: [new ExpirationPlugin({ maxEntries: 100 })],
  })
);

registerRoute(
  ({ url }) =>
    url.origin === self.origin && url.pathname.endsWith(consts.METADATA_SUFFIX),
  new StaleWhileRevalidate({
    fetchOptions,
    cacheName: "assembly-metadata",
    plugins: [new ExpirationPlugin({ maxAgeSeconds: 600 })],
  })
);

registerRoute(
  consts.CATALOG_SUFFIX,
  new StaleWhileRevalidate({
    fetchOptions,
    cacheName: "assembly-catalog",
    plugins: [new ExpirationPlugin({ maxAgeSeconds: 300 })],
  })
);
